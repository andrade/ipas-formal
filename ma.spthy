/**
** Protocol: AS v3 FIXME
** Author:   Daniel Andrade
** Date:     03/2021
** Status:   WIP
**/

theory MA
begin

builtins: hashing, signing, diffie-hellman

functions:
	CMAC/2,                  // RFC 4493
	SHA/1,
	ak/1 [private],
	rk/0 [private],
	real/1 [private],
	sgx_get_key/1

rule Create_Enclave:
	[
		Fr(~id_Enclave),
		Fr(~MRENCLAVE),
		Fr(~MRSIGNER)
	]--[
		Create_Enclave(~id_Enclave, ~MRENCLAVE, ~MRSIGNER)
	]->[
		!ID_Enclave(~id_Enclave),
		!Measurements(~id_Enclave, ~MRENCLAVE, ~MRSIGNER)
	]

rule Create_CPU:
	[
		Fr(~id_CPU)
	]--[
		Create_CPU(~id_CPU)
	]->[
		!ID_CPU(~id_CPU)
	]

rule DH [color=F4D03F]:
	[ Fr(~k) ]-->[ !DH_private($id, ~k), !DH_public($id, 'g'^~k), Out('g'^~k) ]

// rule Reveal_DH [color=FF0000]:
// 	[ !DH_private(id, k) ]--[ Leak_private_DH(id) ]->[ Out(k) ]

// Associate initiator A and responder B
rule Associate:
	[
		Fr(~tid_Alice),     // A's instance of enclave E
		Fr(~tid_Boris),     // B's instance of enclave E
		!ID_CPU(~id_CPU_1), // A's platform to execute E
		!ID_CPU(~id_CPU_2), // B's platform to execute E
		!ID_Enclave(~id_Enclave)
	]--[
		// only use when proving that protocol can be executed
		OnlyAssociateOnce(),

		// ensure the enclave executes on two different platforms
		// i.e. prevents cases of two instances of enclave on the same platform
		Neq(~id_CPU_1, ~id_CPU_2),

		Associate(~tid_Alice, ~tid_Boris)
	]->[
		AState(~tid_Alice, 'next_round', <~id_Enclave, ~id_CPU_1, ~tid_Boris>),
		BState(~tid_Boris, 'next_round', <~id_Enclave, ~id_CPU_2, ~tid_Alice>)
	]

rule A1 [color=D7BDE2]:
	let
		// NOTE Não envio nem o AExGroup nem o AGroup (só contactamos IAS 1x)
		// TODO remover nonce mais tarde, não está na impl. Tudo OK sem nonce?
		m1 = <APublic>
	in
	[
		AState(~tid_Alice, 'next_round', <~id_Enclave, ~id_CPU_1, ~tid_Boris>),
		!DH_private($A, ~APrivate),
		!DH_public($A, APublic)
	]--[
		Progress_A1(~tid_Alice, ~tid_Boris, m1)
	]->[
		AState(~tid_Alice, 'KE', <~id_Enclave, ~id_CPU_1, ~tid_Boris, $A, APublic, ~APrivate>),
		Out(m1)
	]

rule A2 [color=D7BDE2]:
	let
		m2 = <BPublic>

		// report key depends on both enclave measurement and CPU
		report_key = sgx_get_key(<~MRENCLAVE, 'report', real(~id_CPU_1)>)

		KDK = BPublic^~APrivate
		VK = CMAC('VK', KDK)

		// report is sent by enclave to QE for signing (we skip this step)
		data = h(<APublic, BPublic, VK>)
		body = <$A, ~id_CPU_1, ~MRENCLAVE, data>
		report = <body, CMAC(body, report_key)>

		// QE signs AQuote with AK bound to this platform
		content = <body>
		quote = <content, sign(content, ak(~id_CPU_1))>

		m3 = quote
	in
	[
		!Measurements(~id_Enclave, ~MRENCLAVE, ~MRSIGNER),
		AState(~tid_Alice, 'KE', <~id_Enclave, ~id_CPU_1, ~tid_Boris, $A, APublic, ~APrivate>),
		In(m2)
	]--[
		// AKDK(~tid_Alice, ~tid_Boris, $A, $B, KDK),
		Progress_A2(~tid_Alice, ~tid_Boris, m2, m3, KDK, $A)
	]->[
		AState(~tid_Alice, 'MA', <~id_Enclave, ~id_CPU_1, ~tid_Boris, BPublic, $A, APublic, ~APrivate, KDK>),
		Out(m3)
	]

rule A3 [color=D7BDE2]:
	let
		// validate enclave measurement and UD of RA reports
		ud = h(<APublic, BPublic, VK>)
		b1 = <$A, ~id_CPU_1, ~MRENCLAVE, ud>
		c1 = <b1>
		b2 = <$B, ~id_CPU_2, ~MRENCLAVE, ud>
		c2 = <b2>

		// verify IAS signature over RA reports
		AReport = <c1, sign(c1, rk())>
		BReport = <c2, sign(c2, rk())>

		// verify MAC and success state of peer
		SMK = CMAC('SMK', KDK)
		x = <AReport, BReport, 'OK'>
		m4 = <x, CMAC(x, SMK)>
	in
	[
		AState(~tid_Alice, 'MA', <~id_Enclave, ~id_CPU_1, ~tid_Boris, BPublic, $A, APublic, ~APrivate, KDK>),
		In(m4)
	]--[
		Progress_A3(~tid_Alice, ~tid_Boris, m4)
	]->[
		AState(~tid_Alice, 'concluding', <~id_Enclave, ~id_CPU_1, ~tid_Boris, BPublic, $A, APublic, ~APrivate, KDK>)
	]

rule A4 [color=D7BDE2]:
	let
		MK = CMAC('MK', KDK)
		SK = CMAC('SK', KDK)
	in
	[
		AState(~tid_Alice, 'concluding', <~id_Enclave, ~id_CPU_1, ~tid_Boris, BPublic, $A, APublic, ~APrivate, KDK>)
	]--[
		IKeys(~tid_Alice, ~tid_Boris, $A, $B, MK, SK),
		SessionKeys(~tid_Alice, ~tid_Boris, $A, $B, MK, SK), Role('A'),
		// SessionKeys($A, $B, MK, SK),
		Progress_A4(~tid_Alice, ~tid_Boris, MK, SK)
	]->[
	]

rule B1 [color=D2B4DE]:
	let
		m1 = <APublic>
		m2 = <BPublic>
	in
	[
		BState(~tid_Boris, 'next_round', <~id_Enclave, ~id_CPU_2, ~tid_Alice>),
		!DH_private($B, ~BPrivate),
		!DH_public($B, BPublic),
		In(m1)
	]--[
		Progress_B1(~tid_Boris, ~tid_Alice, m1, m2)
	]->[
		BState(~tid_Boris, 'KEMA', <~id_Enclave, ~id_CPU_2, ~tid_Alice, APublic, $B, BPublic, ~BPrivate>),
		Out(m2)
	]

rule B2 [color=D2B4DE]:
	let
		// verify signature with AK (bound to A+P1)
		b1 = <$A, ~id_CPU_1, ~MRENCLAVE, d1>
		c1 = <b1>
		AQuote = <c1, sign(c1, ak(~id_CPU_1))>
		m3 = AQuote


		// report key depends on both enclave measurement and CPU
		report_key = sgx_get_key(<~MRENCLAVE, 'report', real(~id_CPU_2)>)

		KDK = APublic^~BPrivate
		VK = CMAC('VK', KDK)

		// report is sent by enclave to QE for signing (we skip this step)
		data = h(<APublic, BPublic, VK>)
		body = <$B, ~id_CPU_2, ~MRENCLAVE, data>
		report = <body, CMAC(body, report_key)>

		// QE signs BQuote with AK bound to this platform
		content = <body>
		BQuote = <content, sign(content, ak(~id_CPU_2))>


		// sign RA reports with IAS's RK
		AReport = <c1, sign(c1, rk())>
		BReport = <content, sign(content, rk())>


		// reply with both reports and success state
		SMK = CMAC('SMK', KDK)
		x = <AReport, BReport, 'OK'>
		m4 = <x, CMAC(x, SMK)>
	in
	[
		!Measurements(~id_Enclave, ~MRENCLAVE, ~MRSIGNER),
		BState(~tid_Boris, 'KEMA', <~id_Enclave, ~id_CPU_2, ~tid_Alice, APublic, $B, BPublic, ~BPrivate>),
		In(m3)
	]--[
		// BKDK(~tid_Alice, ~tid_Boris, $A, $B, KDK),

		// verify user data matches in both quotes
		Eq(d1, data),
		// enclave measurement is implicitly checked

		Progress_B2(~tid_Boris, ~tid_Alice, m3, m4, KDK, $B)
	]->[
		BState(~tid_Boris, 'concluding', <~id_Enclave, ~id_CPU_2, ~tid_Alice, APublic, $B, BPublic, ~BPrivate, KDK>),
		Out(m4)
	]

rule B3 [color=D2B4DE]:
let
	MK = CMAC('MK', KDK)
	SK = CMAC('SK', KDK)
in
[
	BState(~tid_Boris, 'concluding', <~id_Enclave, ~id_CPU_2, ~tid_Alice, APublic, $B, BPublic, ~BPrivate, KDK>)
]--[
	RKeys(~tid_Alice, ~tid_Boris, $A, $B, MK, SK),
	SessionKeys(~tid_Alice, ~tid_Boris, $A, $B, MK, SK), Role('B'),
	// SessionKeys($A, $B, MK, SK),
	Secret(MK),
	Secret(SK),
	Progress_B3(~tid_Boris, ~tid_Alice, MK, SK)
]->[
]



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



restriction Equality:
	"All x y #i. Eq(x,y)@i ==> x=y"

restriction Inequality:
	"All x #i. Neq(x,x) @i ==> F"

// restriction OnlyOnce:
// 	"All #i #j. OnlyOnce() @#i & OnlyOnce() @#j ==> #i = #j"

// restriction OnlyOneEnclave:
// 	"All #i #j. OnlyOneEnclave() @#i & OnlyOneEnclave() @#j ==> #i = #j"

lemma secrecy:
	"All k #i #j. Secret(k) @i & K(k) @j ==> F"

lemma associate: exists-trace
	"Ex tid_Alice tid_Boris #k. Associate(tid_Alice, tid_Boris) @ #k"

/**
** Ensure session keys can be setup between honest agents.
**
** There is a trace where all equality checks are satisfied and
** session keys MK, SK are setup without revealing private DH keys.
**/
// lemma session_keys: exists-trace
// 	"
// 		(All x y #i. Eq(x,y)@i ==> x=y) &
// 		(Ex A B MK SK #k.
// 			SessionKeys(A, B, MK, SK) @ k &
// 			not(Ex #r. Leak_private_DH(A) @ r) &
// 			not(Ex #r. Leak_private_DH(B) @ r) &
// 			not(Ex #r. Reveal_IAS() @ r)
// 		)
// 	"

lemma flow_v3: exists-trace
	"
	(All #i #j. OnlyAssociateOnce() @#i & OnlyAssociateOnce() @#j ==> #i = #j) &

	(Ex A B KDK X Y MK SK
	m1 m2 m3 m4
	#t1 #t2 #t3 #t4 #t5 #t6 #t7 #i #j.

	Progress_A1(A, B, m1) @ t1 &
	Progress_B1(B, A, m1, m2) @ t2 &
	Progress_A2(A, B, m2, m3, KDK, X) @ t3 &
	Progress_B2(B, A, m3, m4, KDK, Y) @ t4 &
	Progress_A3(A, B, m4) @ t5 &

	Progress_B3(B, A, MK, SK) @ t6 &
	Progress_A4(A, B, MK, SK) @ t7 &

	// ensure different DH identities
	not(X=Y) &

	// not(Ex #r. Leak_private_DH(X) @ r) &
	// not(Ex #r. Leak_private_DH(Y) @ r) &

	IKeys(A, B, X, Y, MK, SK) @ #i &
	RKeys(A, B, X, Y, MK, SK) @ #j &

	t1<t2 & t2<t3 & t3<t4 & t4<t5)
	"

end
